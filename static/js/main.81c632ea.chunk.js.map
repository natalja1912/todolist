{"version":3,"sources":["utils/constants.js","components/Header/Header.js","components/Footer/Footer.js","components/Form/Form.js","components/Checkbox/Checkbox.js","components/Todo/Todo.js","components/App/App.js","serviceWorker.js","index.js"],"names":["todos","task","checked","Header","onClick","className","Footer","Form","value","submitButtonValue","handleChange","handleSubmit","type","placeholder","onChange","evt","target","preventDefault","handleButtonSubmit","Checkbox","Todo","todo","index","handleEditButton","handleCopyButton","handleDeleteButton","handleCheckBox","key","App","useState","todolist","setToDoList","inputValue","setInputValue","taskToEdit","setTaskToEdit","filter","setFilter","setSubmitButtonValue","doneToDos","renderedToDos","splice","newToDoList","concat","map","selectedTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81c632ea.chunk.js","sourcesContent":["\r\nconst todos = [\r\n  {\r\n    task: 'Сделать проектную работу',\r\n    checked: false\r\n  },\r\n  {\r\n    task: 'Полить цветы',\r\n    checked: false\r\n  },\r\n  {\r\n    task: 'Пройти туториал по Реакту',\r\n    checked: false\r\n  },\r\n  {\r\n    task: 'Сделать фронт для своего проекта',\r\n    checked: false\r\n  },\r\n  {\r\n    task: 'Погулять с собакой',\r\n    checked: true\r\n  },\r\n  {\r\n    task: 'Разобраться в замыканиях',\r\n    checked: false\r\n  },\r\n  {\r\n    task: 'Решить задачу на Codewars',\r\n    checked: false\r\n  }\r\n];\r\n\r\nexport default todos;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header({ onClick }) {\r\n    return (\r\n        <header className=\"header\">\r\n            <nav className=\"header__nav\">\r\n                <button className=\"filter__button\" onClick={() => onClick('all')}>&rarr; Вce задачи</button>\r\n                <button className=\"filter__button\" onClick={() => onClick('done')}>&rarr; Выполненные задачи</button>\r\n            </nav>\r\n            <h1 className=\"header__heading\">Список дел</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer className=\"footer\">\r\n        © Natalia Pavlova. 2020\r\n      </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Form.css';\r\n\r\nfunction Form({ value, submitButtonValue, handleChange, handleSubmit }) {\r\n    function handleButtonSubmit(evt) {\r\n        evt.preventDefault();\r\n        handleSubmit();\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\">\r\n            <input className=\"form__input\" type=\"text\" placeholder=\"Следующее дело...\" value={value} onChange={(evt) => handleChange(evt.target.value)} />\r\n    <button className=\"form__button\" type=\"submit\" onClick={(evt) => handleButtonSubmit(evt)}>{submitButtonValue}</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './Checkbox.css';\r\n\r\nfunction Checkbox({ checked, onClick }) {\r\n    return (\r\n        <button className={`checkbox ${checked && 'checkbox_checked'}`} onClick={onClick}></button>\r\n    )\r\n}\r\n\r\nexport default Checkbox;","import React from 'react';\r\nimport './Todo.css';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\n\r\nfunction Todo({ todo, index, handleEditButton, handleCopyButton, handleDeleteButton, handleCheckBox }) {\r\n\r\n    return (\r\n        <li className=\"list__item\" key={index}>\r\n            <div className=\"list__item-text\">\r\n                <Checkbox checked={todo.checked} onClick={() => handleCheckBox(index)} />\r\n                <p className={`list__item-label ${todo.checked && 'label-strike'}`}>{todo.task}</p>\r\n            </div>\r\n            <div className=\"list__item-buttons\">\r\n                <button className=\"list__item-button list__item-button_edit\" onClick={() => handleEditButton(index)}></button>\r\n                <button className=\"list__item-button list__item-button_copy\" onClick={() => handleCopyButton(index)}></button>\r\n                <button className=\"list__item-button list__item-button_delete\" onClick={() => handleDeleteButton(index)}></button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Todo;\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport todos from '../../utils/constants';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport Form from '../Form/Form';\nimport Todo from '../Todo/Todo';\n\nfunction App() {\n  const [todolist, setToDoList] = useState(todos);\n  const [inputValue, setInputValue] = useState('');\n  //переменная taskToEdit для определения, какое задание нужно редактировать, при сабмите формы\n  const [taskToEdit, setTaskToEdit] = useState();\n  const [filter, setFilter] = useState('all');\n  const [submitButtonValue, setSubmitButtonValue] = useState('Добавить');\n\n  //при нажатии кнопки edit меняем значение поля ввода формы на текст задачи, к которой относится нажатая кнопка\n  function handleEditButton(index) {\n    setSubmitButtonValue('Сохранить');\n    const selectedTask = todolist[index];\n    setInputValue(selectedTask.task);\n    setTaskToEdit(index);\n  }\n\n  //копирование задачи\n  function handleCopyButton(index) {\n    const selectedTask = todolist[index];\n    todolist.splice(index, 0, selectedTask);\n    const newToDoList = todolist.concat();\n    setToDoList(newToDoList);\n  }\n\n  //удаление задачи из списка дел\n  function handleDeleteButton(index) {\n    todolist.splice(index, 1);\n    const newToDoList = todolist.concat();\n    setToDoList(newToDoList);\n  }\n\n  //добавление новой задачи в список дел\n  function handleSubmitButton() {\n    if (typeof taskToEdit !== 'number') {\n      setToDoList([\n        {\n          task: inputValue,\n          checked: false\n        },\n        ...todolist\n      ])\n    }\n    else {\n      todolist.splice(taskToEdit, 1, { task: inputValue, checked: false });\n      const newToDoList = todolist.concat();\n      setToDoList(newToDoList);\n    }\n    setInputValue('');\n    setTaskToEdit();\n    setSubmitButtonValue('Добавить');\n  }\n\n\n  //изменение значка checkbox, отмечаем выполнена задача или нет\n  function handleCheckBox(index) {\n    const selectedTask = todolist[index];\n    todolist.splice(index, 1, { task: selectedTask.task, checked: !selectedTask.checked });\n    const newToDoList = todolist.concat();\n    setToDoList(newToDoList);\n  }\n\n  //массив сделанных заданий\n  const doneToDos = todolist.filter(todo => todo.checked === true);\n  //массив заданий для отрисовки\n  let renderedToDos = [];\n  filter === 'done' ? renderedToDos = doneToDos : renderedToDos = todolist;\n\n  return (\n    <div className=\"App\">\n      <Header onClick={(value) => setFilter(value)} />\n      <Form value={inputValue} submitButtonValue={submitButtonValue} handleChange={(value) => setInputValue(value)} handleSubmit={handleSubmitButton} />\n      <ul className=\"list\">\n        {\n          renderedToDos.map((todo, index) =>\n            <Todo todo={todo} index={index} handleCopyButton={(value) => handleCopyButton(value)} handleEditButton={(value) => handleEditButton(value)} handleDeleteButton={(value) => handleDeleteButton(value)} handleCheckBox={(value) => handleCheckBox(value)} />)\n        }\n      </ul>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}